/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import graphview.GraphNode;
import graphview.GraphScene;
import graphview.GraphUtils;
import java.awt.Color;
import java.util.ArrayList;

/**
 *
 * @author Kirill
 */
public class HighlightPanel extends javax.swing.JPanel {

    GraphScene scene;
    /**
     * Creates new form HighlightPanel
     */
    public HighlightPanel(GraphScene scene) {
        this.scene=scene;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonHClusters = new javax.swing.JButton();
        jButtonHCycles = new javax.swing.JButton();
        jButtonHClear = new javax.swing.JButton();

        jButtonHClusters.setText("Highlight clusters");
        jButtonHClusters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHClustersActionPerformed(evt);
            }
        });

        jButtonHCycles.setText("Highlight cycles");
        jButtonHCycles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHCyclesActionPerformed(evt);
            }
        });

        jButtonHClear.setText("Clear highlight");
        jButtonHClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonHClusters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHCycles, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                    .addComponent(jButtonHClear, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonHClusters)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonHCycles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonHClear)
                .addContainerGap(385, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonHClustersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHClustersActionPerformed
        ArrayList<ArrayList<GraphNode>> clusters=GraphUtils.findClusters(scene);
        
        Color c=null;
        for(int i=0;i<clusters.size();i++)
        {
            c=GraphUtils.nextColor(c);
            for(int j=0;j<clusters.get(i).size();j++)
            {
                clusters.get(i).get(j).getAspect().highlight(c);
            };
        };
        scene.updateScene();
    }//GEN-LAST:event_jButtonHClustersActionPerformed

    private void jButtonHCyclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHCyclesActionPerformed
        ArrayList<ArrayList<GraphNode>> clusters=GraphUtils.findCycles(scene);
        
        Color c=null;
        for(int i=0;i<clusters.size();i++)
        {
            c=GraphUtils.nextColor(c);
            for(int j=0;j<clusters.get(i).size();j++)
            {
                clusters.get(i).get(j).getAspect().addHighlight(c);
            };
        };
        scene.updateScene();
    }//GEN-LAST:event_jButtonHCyclesActionPerformed

    private void jButtonHClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHClearActionPerformed
        scene.clearHighlight();
    }//GEN-LAST:event_jButtonHClearActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonHClear;
    private javax.swing.JButton jButtonHClusters;
    private javax.swing.JButton jButtonHCycles;
    // End of variables declaration//GEN-END:variables
}
